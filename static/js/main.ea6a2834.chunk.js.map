{"version":3,"sources":["media/win.wav","media/loose.wav","components/GameContainer.js","serviceWorker.js","index.js"],"names":["module","exports","confettiConfig","angle","spread","startVelocity","elementCount","dragFriction","duration","stagger","width","height","colors","operations","operator","leftOperand","rightOperand","solution","random_solutions","winAudio","Audio","winAudioFile","looseAudio","looseAudioFile","Operation","props","Header","size","operation","ProductSolutions","map","el","index","key","ProductSolution","value","handleClick","confettiActive","confettisActive","Button","onClick","active","config","GameContainer","useState","currentOperation","setCurrentOperation","setConfettiActive","badResponses","setBadResponses","goodResponses","setGoodResponses","className","spy","Grid","textAlign","style","verticalAlign","GridRow","Column","maxWidth","responseIndex","newConfState","play","setTimeout","newOp","genIntBetween","floor","ceil","Math","random","nearIntInf","num","nearIntSup","leftOp","rightOp","result","randomSolutions","pos","sol","length","splice","generateRandomOp","columns","GridColumn","Label","circular","color","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ea6a2834.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/win.3a77f1ed.wav\";","module.exports = __webpack_public_path__ + \"static/media/loose.b82c2913.wav\";","import React, { useState } from 'react';\r\nimport './GameContainer.css';\r\nimport { Header, Button, Grid, GridRow, GridColumn, Label } from 'semantic-ui-react'\r\nimport Confetti from 'react-dom-confetti';\r\nimport Jump from 'react-reveal/Jump';\r\nimport Shake from 'react-reveal/Shake';\r\nimport winAudioFile from '../media/win.wav';\r\nimport looseAudioFile from '../media/loose.wav';\r\n\r\nconst confettiConfig = {\r\n    angle: \"0\",\r\n    spread: \"360\",\r\n    startVelocity: \"30\",\r\n    elementCount: \"30\",\r\n    dragFriction: \"0.2\",\r\n    duration: \"1000\",\r\n    stagger: \"0\",\r\n    width: \"10px\",\r\n    height: \"10px\",\r\n    colors: [\"#a864fd\", \"#29cdff\", \"#78ff44\", \"#ff718d\", \"#fdff6a\"]\r\n};\r\n\r\nconst operations = [\r\n    {\r\n        operator: \"mult\",\r\n        leftOperand: 5,\r\n        rightOperand: 5,\r\n        solution: 25,\r\n        random_solutions: [25, 32, 15]\r\n    },\r\n    {\r\n        operator: \"mult\",\r\n        leftOperand: 6,\r\n        rightOperand: 7,\r\n        solution: 42,\r\n        random_solutions: [42, 32, 44]\r\n    },\r\n    {\r\n        operator: \"mult\",\r\n        leftOperand: {\r\n            operator: \"mult\",\r\n            leftOperand: 5,\r\n            rightOperand: 5,\r\n        },\r\n        rightOperand: 2,\r\n        solution: 50,\r\n        random_solutions: [25, 32, 15]\r\n    }\r\n];\r\n\r\nconst winAudio = new Audio(winAudioFile);\r\nconst looseAudio = new Audio(looseAudioFile);\r\n\r\nfunction GameContainer() {\r\n\r\n    const [currentOperation, setCurrentOperation] = useState(operations[0]);\r\n    const [confettisActive, setConfettiActive] = useState(currentOperation.random_solutions.map(() => false));\r\n    const [badResponses, setBadResponses] = useState(0);\r\n    const [goodResponses, setGoodResponses] = useState(0);\r\n\r\n\r\n    // Handle clic for all game (check solution & go to another test)\r\n    const handleClick = (responseIndex) => {\r\n        if (currentOperation.random_solutions[responseIndex] === currentOperation.solution) {\r\n            let newConfState = [...confettisActive];\r\n            newConfState[responseIndex] = true;\r\n            setConfettiActive(newConfState);\r\n            winAudio.play();\r\n            setTimeout(() => setConfettiActive(currentOperation.random_solutions.map(() => false)), 1000);\r\n            setTimeout(() => { setGoodResponses(goodResponses + 1) }, 300);\r\n        } else {\r\n            looseAudio.play();\r\n            setBadResponses(badResponses + 1);\r\n        }\r\n\r\n        // let newOp = { ...operations[1] };\r\n        let newOp = generateRandomOp();\r\n        // setCurrentOperation(newOp)\r\n\r\n        setTimeout(() => { setCurrentOperation(newOp) }, 1000);\r\n    };\r\n\r\n    return (\r\n        <div className=\"GameContainer\">\r\n            <Shake spy={badResponses} duration={1000}>\r\n                <Jump spy={goodResponses}>\r\n                    <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\r\n                        <GridRow>\r\n                            <Grid.Column style={{ maxWidth: 450 }}>\r\n                                <Operation operation={currentOperation} />\r\n                                <ProductSolutions operation={currentOperation} handleClick={handleClick} confettisActive={confettisActive} />\r\n                            </Grid.Column>\r\n                        </GridRow>\r\n                        <GridRow columns={2}>\r\n                            <GridColumn style={{ maxWidth: 150 }} >\r\n                                <Label circular color=\"green\" size=\"huge\">{goodResponses}</Label>\r\n                            </GridColumn>\r\n                            <GridColumn style={{ maxWidth: 150 }} >\r\n                                <Label circular color=\"red\" size=\"huge\">{badResponses}</Label>\r\n                            </GridColumn>\r\n                        </GridRow>\r\n                    </Grid>\r\n                </Jump>\r\n            </Shake>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nfunction Operation(props) {\r\n    function createOperationText(operation) {\r\n        // TO DO switch case for all signs\r\n        const opSign = \"x\";\r\n        return `${operation.leftOperand} ${opSign} ${operation.rightOperand}`;\r\n    }\r\n\r\n    return (\r\n        <Header size='huge'>{createOperationText(props.operation)}</Header>\r\n    );\r\n}\r\n\r\nfunction ProductSolutions(props) {\r\n    return (\r\n        props.operation.random_solutions.map(\r\n            (el, index) => {\r\n                return <p key={index}>\r\n                    <ProductSolution\r\n                        value={el}\r\n                        handleClick={() => props.handleClick(index)}\r\n                        confettiActive={props.confettisActive[index]}\r\n                    />\r\n                </p>\r\n            })\r\n    );\r\n}\r\n\r\nfunction ProductSolution(props) {\r\n    return (\r\n        <Button onClick={props.handleClick}>\r\n            <Confetti active={props.confettiActive} config={confettiConfig} />\r\n            {props.value}\r\n        </Button>\r\n    );\r\n}\r\n\r\n// function timerBar() {\r\n// }\r\n\r\nfunction generateRandomOp() {\r\n\r\n    function genIntBetween(floor, ceil) {\r\n\r\n        let res = Math.floor(Math.random() * ceil) + floor;\r\n        // console.log(`Floor : ${floor} | Ceil : ${ceil} | Result : ${res}`);\r\n        return res;\r\n    }\r\n\r\n    function nearIntInf(num) {\r\n        return num - Math.floor(num / 3);;\r\n    }\r\n    function nearIntSup(num) {\r\n        return num + Math.floor(num / 3);\r\n    }\r\n\r\n    let leftOp = genIntBetween(1, 9);\r\n    let rightOp = genIntBetween(1, 9);\r\n    let result = leftOp * rightOp;\r\n    let randomSolutions = [genIntBetween(nearIntInf(result), nearIntSup(result)), genIntBetween(nearIntInf(result), nearIntSup(result)), genIntBetween(nearIntInf(result), nearIntSup(result))];\r\n\r\n\r\n\r\n    randomSolutions = randomSolutions.map((sol) => {\r\n        if (sol === result) {\r\n            return sol + 2;\r\n        } else {\r\n            return sol;\r\n        }\r\n    });\r\n\r\n\r\n    let pos = genIntBetween(0, randomSolutions.length + 1);\r\n    randomSolutions.splice(pos, 0, result);\r\n\r\n    return {\r\n        operator: \"mult\",\r\n        leftOperand: leftOp,\r\n        rightOperand: rightOp,\r\n        solution: result,\r\n        random_solutions: randomSolutions\r\n    };\r\n\r\n}\r\n\r\nexport default GameContainer;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport GameContainer from './components/GameContainer';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(<GameContainer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}